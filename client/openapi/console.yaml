openapi: 3.0.0
info:
  title: RHTAS Console API
  version: 1.0.0
  description: API for interacting with artifact trust, verification, and metadata services in the RHTAS Console.
servers:
  - url: https://api.rhtas.example.com
    description: Production server
tags:
  - name: Artifact
    description: Operations for signing and verifying artifacts
  - name: Rekor
    description: Operations for interacting with Rekor transparency log
  - name: Trust
    description: Operations for trust configuration and TUF targets
paths:
  /healthz:
    get:
      operationId: GetHealthz
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
  /api/v1/artifacts/verify:
    post:
      summary: Verify an artifact
      tags:
        - Artifact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyArtifactRequest'
      responses:
        '200':
          description: Verification succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyArtifactResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Verification failed due to internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/artifacts/image:
    get:
      summary: Retrieve metadata and digest from an OCI-compliant registry
      tags:
        - Image
      parameters:
        - name: uri
          in: query
          required: true
          schema:
            type: string
            description: URI of the container image (e.g., docker.io/library/nginx:latest)
            example: docker.io/library/nginx:latest
      security:
        - basicAuth: []
      responses:
        '200':
          description: Container image metadata and digest retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageMetadataResponse'
        '400':
          description: Invalid input (e.g., malformed container image URI)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Container image not found in the registry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/rekor/entries/{uuid}:
    get:
      summary: Retrieve Rekor log entry by UUID
      tags:
        - Rekor
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rekor entry data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RekorEntry'
        '404':
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/rekor/public-key:
    get:
      summary: Get Rekor public key
      tags:
        - Rekor
      responses:
        '200':
          description: Rekor public key in PEM format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RekorPublicKey'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/artifacts/{artifact}/policies:
    get:
      summary: Get policies and attestations for an artifact
      tags:
        - Artifact
      parameters:
        - name: artifact
          in: path
          required: true
          schema:
            type: string
            example: quay.io/example/app:latest
      responses:
        '200':
          description: Policy and attestation data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactPolicies'
        '404':
          description: Artifact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/trust/config:
    get:
      summary: Get Fulcio and Rekor metadata from TUF targets
      description: |
        Parses the TUF targets metadata from the specified repository and returns information about
        Fulcio certificate authorities and Rekor transparency logs.
      tags:
        - Trust
      parameters:
        - name: tufRepositoryUrl
          in: query
          required: false
          schema:
            type: string
            description: URL of the TUF repository
            example: https://tuf-repo-cdn.sigstore.dev/
      responses:
        '200':
          description: Trust root data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustConfig'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/trust/root-metadata-info:
    get:
      summary: Get TUF Root Metadata
      description: |
        Retrieves metadata information about the TUF root versions from the trust repository.
        This includes metadata versioning, expiration timestamps, and current status (e.g., valid or expired).
      tags:
        - Trust
      parameters:
        - name: tufRepositoryUrl
          in: query
          required: false
          schema:
            type: string
            description: URL of the TUF repository
            example: https://tuf-repo-cdn.sigstore.dev/
      responses:
        '200':
          description: List of TUF root metadata entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RootMetadataInfoList'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/trust/targets:
    get:
      summary: Get TUF Targets List
      description: |
        Fetches and returns the list of TUF target files from the specified repository.
      tags:
        - Trust
      parameters:
        - name: tufRepositoryUrl
          in: query
          required: false
          schema:
            type: string
            description: URL of the TUF repository
            example: https://tuf-repo-cdn.sigstore.dev/
      responses:
        '200':
          description: List of TUF target names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetsList'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/trust/target:
    get:
      summary: Get TUF Target File Content
      description: |
        Fetches and returns the raw content of a specific TUF target file from the specified repository.
      tags:
        - Trust
      parameters:
        - name: tufRepositoryUrl
          in: query
          required: false
          schema:
            type: string
            description: URL of the TUF repository
            example: https://tuf-repo-cdn.sigstore.dev/
        - name: target
          in: query
          required: true
          schema:
            type: string
            description: Target filename
            example: rekor.pub
      responses:
        '200':
          description: Content of the requested TUF target file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetContent'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/trust/targets/certificates:
    get:
      summary: Get Certificates Information
      description: |
        Fetches and returns the list information of all targets of type certificate.
      tags:
        - Trust
      parameters:
        - name: tufRepositoryUrl
          in: query
          required: false
          schema:
            type: string
            description: URL of the TUF repository
            example: https://tuf-repo-cdn.sigstore.dev/
      responses:
        '200':
          description: List of TUF target names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateInfoList'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    VerifyArtifactRequest:
      type: object
      description: >
        Parameters for verifying a signed artifact or container image using Sigstore and related trust sources.
        Fields correspond to common verification inputs such as issuer expectations, trusted roots, and TUF configuration.
      properties:
        ociImage:
          type: string
          description: >
            The OCI image reference to verify.
          example: quay.io/example/app:latest
        bundle:
          type: object
          description: >
            Optional full Sigstore verification bundle (json).
            If provided, the verifier will validate this bundle directly instead of fetching an OCI image.
          nullable: true
          additionalProperties: true
        artifactDigest:
          type: string
          description: >
            Hex-encoded digest of the artifact to verify. Used when the artifact reference
            does not directly include a digest (e.g., separate file verification).
            Mandatory when using the bundle.
        artifactDigestAlgorithm:
          type: string
          default: sha256
          description: >
            Digest algorithm used to compute the artifact's digest.
            Common values: sha256, sha512.
        expectedOIDIssuer:
          type: string
          description: >
            Expected OIDC issuer for the signing certificate (Fulcio-based verification).
          example: https://accounts.google.com
          nullable: true
        expectedOIDIssuerRegex:
          type: string
          description: >
            Regular expression that the OIDC issuer must match, if exact match is not desired.
          nullable: true
        expectedSAN:
          type: string
          description: >
            Expected identity in the signing certificate's Subject Alternative Name (SAN) extension.
          example: user@example.com
          nullable: true
        expectedSANRegex:
          type: string
          description: >
            Regular expression that the SAN value must match, allowing pattern-based verification.
          nullable: true
        requireTimestamp:
          type: boolean
          default: true
          description: >
            Require that either an RFC3161 signed timestamp or a log entry integrated timestamp
            is present in the signature.
        requireCTLog:
          type: boolean
          default: true
          description: >
            Require that a Certificate Transparency (CT) log entry exists for the signing certificate.
        requireTLog:
          type: boolean
          default: true
          description: >
            Require that an Artifact Transparency (Rekor) log entry exists for the verified artifact.
        minBundleVersion:
          type: string
          description: >
            Minimum acceptable bundle version (e.g., '0.1') for verified signatures.
          example: "0.1"
          nullable: true
        tufRootURL:
          type: string
          description: >
            URL of a TUF repository containing the trusted root JSON file.
          example: https://tuf-repo-cdn.sigstore.dev
          nullable: true
        predicateType:
          type: string
          description: >
            The type of the predicate for the attestation.
          example: https://example.com/attestations/build
      required:
        - expectedIssuer
        - expectedSAN
    VerifyArtifactResponse:
      type: object
      properties:
        verified:
          type: boolean
          description: Whether verification was successful
        details:
          type: object
          description: >
            The full verification result payload returned by the Sigstore verifier.
            This structure may evolve over time.
          additionalProperties: true
      required:
        - verified
        - details
    InclusionProof:
      type: object
      description: Merkle tree inclusion proof for a Rekor entry
      properties:
        checkpoint:
          type: string
          description: Checkpoint string for the log, including tree size and root hash
        hashes:
          type: array
          description: Array of Merkle tree hashes for the inclusion proof
          items:
            type: string
            description: A single hash in the inclusion proof
        logIndex:
          type: integer
          format: int64
          description: Log index of the entry in the Merkle tree
        rootHash:
          type: string
          description: Root hash of the Merkle tree at the time of inclusion
        treeSize:
          type: integer
          format: int64
          description: Size of the Merkle tree at the time of inclusion
      required:
        - checkpoint
        - hashes
        - logIndex
        - rootHash
        - treeSize
    Verification:
      type: object
      description: Verification details for a Rekor entry, including inclusion proof and signed timestamp
      properties:
        inclusionProof:
          $ref: '#/components/schemas/InclusionProof'
          description: Merkle tree inclusion proof for the entry
        signedEntryTimestamp:
          type: string
          description: Base64-encoded signed timestamp for the entry
      required:
        - inclusionProof
        - signedEntryTimestamp
    RekorEntry:
      type: object
      properties:
        uuid:
          type: string
          description: Unique identifier of the Rekor entry
        body:
          type: string
          description: Base64-encoded entry body
        integratedTime:
          type: integer
          description: Timestamp of when the entry was integrated
        logID:
          type: string
          description: Unique identifier of the transparency log
        logIndex:
          type: integer
          description: Index in the transparency log
        verification:
          $ref: '#/components/schemas/Verification'
          description: Verification details for the entry
      required:
        - uuid
        - body
        - integratedTime
        - logID
        - logIndex
        - verification
    RekorPublicKey:
      type: object
      properties:
        publicKey:
          type: string
          description: Rekor public key in PEM format
          example: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkq...\n-----END PUBLIC KEY-----"
      required:
        - publicKey
    ArtifactPolicies:
      type: object
      properties:
        artifact:
          type: string
          description: The artifact URI
        policies:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Policy name
              status:
                type: string
                description: Policy status
              lastChecked:
                type: string
                format: date-time
                description: Last time the policy was checked
        attestations:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: Attestation type
              issuer:
                type: string
                description: Issuer of the attestation
              subject:
                type: string
                description: Subject of the attestation
              issuedAt:
                type: string
                format: date-time
                description: Issuance timestamp
      required:
        - artifact
        - policies
        - attestations
    TrustConfig:
      type: object
      properties:
        fulcioCertAuthorities:
          type: array
          items:
            type: object
            properties:
              subject:
                type: string
                description: Certificate authority subject
              pem:
                type: string
                description: Certificate in PEM format
                example: "-----BEGIN CERTIFICATE-----\nMIIBIjANBgkq...\n-----END CERTIFICATE-----"
            required:
              - subject
              - pem
      required:
        - fulcioCertAuthorities
    Metadata:
      type: object
      description: Metadata for a container image
      properties:
        mediaType:
          type: string
          description: Media type of the container image (e.g., OCI manifest type)
          example: application/vnd.oci.image.manifest.v1+json
        size:
          type: integer
          format: int64
          description: Size of the container image in bytes
          example: 1234
        created:
          type: string
          format: date-time
          description: Creation timestamp of the container image (if available)
          nullable: true
        labels:
          type: object
          additionalProperties:
            type: string
          description: Key-value labels or annotations associated with the container image
          nullable: true
          example:
            org.opencontainers.image.version: 1.0.0
      required:
        - mediaType
        - size
    ImageMetadataResponse:
      type: object
      properties:
        image:
          type: string
          description: The container image URI
          example: docker.io/library/nginx:latest
        metadata:
          $ref: '#/components/schemas/Metadata'
        digest:
          type: string
          description: The container image's digest (e.g., SHA256 hash)
          example: sha256:abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890
      required:
        - artifact
        - metadata
        - digest
    RootMetadataInfo:
      type: object
      properties:
        version:
          type: string
          description: Version of the TUF root metadata
        expires:
          type: string
          description: Expiry date of the TUF root metadata
        status:
          type: string
          description: Status of the TUF root metadata
      required:
        - version
        - expires
        - status
    RootMetadataInfoList:
      type: object
      properties:
        repo-url:
          type: string
          description: URL of the TUF repository
        data:
          type: array
          items:
            $ref: '#/components/schemas/RootMetadataInfo'
      required:
        - data
    TargetsList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TargetInfo'
      required:
        - data
    TargetContent:
      type: object
      properties:
        content:
          type: string
      required:
        - content
    TargetInfo:
      type: object
      properties:
        name:
          type: string
          description: Target name
        type:
          type: string
          description: Target type
        status:
          type: string
          description: Status of the target.
        content:
          type: string
          description: Content of the target.
      required:
        - name
        - type
        - status
        - content
    CertificateInfo:
      type: object
      properties:
        subject:
          type: string
          description: Certificate subject
        issuer:
          type: string
          description: Certificate issuer
        type:
          type: string
          description: Target type
        status:
          type: string
          description: Status of the target to which the certificate is associated.
        target:
          type: string
          description:  The TUF target to which the certificate is associated.
        expiration:
          type: string
          description: Expiration date and time of the certificate (notAfter).
        pem:
          type: string
          description: Certificate in PEM-encoded format.
      required:
        - subject
        - issuer
        - type
        - status
        - target
        - expiration
        - pem
    CertificateInfoList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CertificateInfo'
      required:
        - data
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
