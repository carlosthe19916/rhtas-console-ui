// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  GetHealthzData,
  GetHealthzResponses,
  PostApiV1ArtifactsSignData,
  PostApiV1ArtifactsSignResponses,
  PostApiV1ArtifactsSignErrors,
  PostApiV1ArtifactsVerifyData,
  PostApiV1ArtifactsVerifyResponses,
  PostApiV1ArtifactsVerifyErrors,
  GetApiV1RekorEntriesByUuidData,
  GetApiV1RekorEntriesByUuidResponses,
  GetApiV1RekorEntriesByUuidErrors,
  GetApiV1RekorPublicKeyData,
  GetApiV1RekorPublicKeyResponses,
  GetApiV1RekorPublicKeyErrors,
  GetApiV1ArtifactsByArtifactPoliciesData,
  GetApiV1ArtifactsByArtifactPoliciesResponses,
  GetApiV1ArtifactsByArtifactPoliciesErrors,
  GetApiV1TrustConfigData,
  GetApiV1TrustConfigResponses,
  GetApiV1TrustConfigErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const getHealthz = <ThrowOnError extends boolean = false>(options?: Options<GetHealthzData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetHealthzResponses, unknown, ThrowOnError>({
    responseType: "json",
    url: "/healthz",
    ...options,
  });
};

/**
 * Sign an artifact using Cosign
 */
export const postApiV1ArtifactsSign = <ThrowOnError extends boolean = false>(
  options: Options<PostApiV1ArtifactsSignData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1ArtifactsSignResponses,
    PostApiV1ArtifactsSignErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/v1/artifacts/sign",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify an artifact using Cosign
 */
export const postApiV1ArtifactsVerify = <ThrowOnError extends boolean = false>(
  options: Options<PostApiV1ArtifactsVerifyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1ArtifactsVerifyResponses,
    PostApiV1ArtifactsVerifyErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/v1/artifacts/verify",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Retrieve Rekor log entry by UUID
 */
export const getApiV1RekorEntriesByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetApiV1RekorEntriesByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1RekorEntriesByUuidResponses,
    GetApiV1RekorEntriesByUuidErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/v1/rekor/entries/{uuid}",
    ...options,
  });
};

/**
 * Get Rekor public key
 */
export const getApiV1RekorPublicKey = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1RekorPublicKeyData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1RekorPublicKeyResponses,
    GetApiV1RekorPublicKeyErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/v1/rekor/public-key",
    ...options,
  });
};

/**
 * Get policies and attestations for an artifact
 */
export const getApiV1ArtifactsByArtifactPolicies = <ThrowOnError extends boolean = false>(
  options: Options<GetApiV1ArtifactsByArtifactPoliciesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiV1ArtifactsByArtifactPoliciesResponses,
    GetApiV1ArtifactsByArtifactPoliciesErrors,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/v1/artifacts/{artifact}/policies",
    ...options,
  });
};

/**
 * Get TUF targets and Fulcio certificate authorities
 */
export const getApiV1TrustConfig = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1TrustConfigData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetApiV1TrustConfigResponses, GetApiV1TrustConfigErrors, ThrowOnError>({
    responseType: "json",
    url: "/api/v1/trust/config",
    ...options,
  });
};
